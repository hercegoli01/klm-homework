name: Deploy Notes API

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: homework-klm
  REGION: us-east1
  REPO: notes-api
  IMAGE: notes-api
  TAG: latest

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - run: gcloud config set project "$PROJECT_ID"
      - run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev -q

  terraform-backend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - run: gcloud config set project "$PROJECT_ID"
      - run: |
          BUCKET="${PROJECT_ID}-tfstate"
          if ! gcloud storage buckets describe "gs://$BUCKET" --project="$PROJECT_ID" >/dev/null 2>&1; then
            gcloud storage buckets create "gs://$BUCKET" \
              --project="$PROJECT_ID" \
              --location="$REGION" \
              --uniform-bucket-level-access
          fi

  terraform-validate:
    runs-on: ubuntu-latest
    needs: terraform-backend
    defaults:
      run:
        working-directory: infra
    env:
      TF_VAR_project_id: $PROJECT_ID
      TF_VAR_region: $REGION
      TF_VAR_db_password: ${{ secrets.TF_VAR_db_password }}
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
      - run: terraform init -input=false
      - run: terraform fmt -recursive
      - run: terraform validate
      - run: terraform plan

  terraform-apply-foundation:
    runs-on: ubuntu-latest
    needs: terraform-validate
    defaults:
      run:
        working-directory: infra
    env:
      TF_VAR_project_id: $PROJECT_ID
      TF_VAR_region: $REGION
      TF_VAR_db_password: ${{ secrets.TF_VAR_db_password }}
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
      - run: terraform init -input=false
      - run: |
          terraform apply \
            -target=google_artifact_registry_repository.notes_repo \
            -target=google_service_account.notes_sa \
            -target=google_secret_manager_secret.db_password \
            -target=google_secret_manager_secret_version.db_password_version \
            -auto-approve

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: pip install -r requirements.txt black flake8 pytest
      - run: black --check app/ && flake8 app/
      - run: pytest -v || true

  docker-build-push:
    runs-on: ubuntu-latest
    needs: [terraform-apply-foundation, test]
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - run: gcloud config set project "$PROJECT_ID"
      - run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev -q
      - uses: docker/setup-buildx-action@v3
      - run: |
          IMAGE_URI="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${IMAGE}:${TAG}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
      - run: |
          docker buildx build \
            -t "$IMAGE_URI" \
            --push \
            .

  terraform-apply-app:
    runs-on: ubuntu-latest
    needs: docker-build-push
    defaults:
      run:
        working-directory: infra
    env:
      TF_VAR_project_id: $PROJECT_ID
      TF_VAR_region: $REGION
      TF_VAR_db_password: ${{ secrets.TF_VAR_db_password }}
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
      - run: terraform init -input=false
      - run: terraform apply -auto-approve

  smoke-test:
    runs-on: ubuntu-latest
    needs: terraform-apply-app
    defaults:
      run:
        working-directory: infra
    env:
      TF_VAR_project_id: $PROJECT_ID
      TF_VAR_region: $REGION
      TF_VAR_db_password: ${{ secrets.TF_VAR_db_password }}
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
      - run: terraform init -input=false
      - run: |
          GATEWAY_URL=$(terraform output -raw api_gateway_url)
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$GATEWAY_URL/notes")
          if [ "$STATUS" -ne 200 ]; then
            exit 1
          fi

